from rdkit import Chem
from rdkit.Chem import Draw
from rdkit.Chem.Draw import rdMolDraw2D
from IPython.display import Image
import torch
import numpy as np
import traceback
import sys

sys.path.append('../')
from data.data_prepare import RetroDiffDataInfos


class MolecularVisualization:
    def __init__(self, remove_h, dataset_infos):
        self.remove_h = remove_h
        self.dataset_infos = dataset_infos

    def graph2mol(self, atom_types, bond_types):
        atom_decoder = self.dataset_infos.id2atom
        bond_dict = self.dataset_infos.bond_dict
        
        atom_types = atom_types.numpy()
        bond_types = bond_types.numpy()

        mol = Chem.RWMol()
        node_to_idx = {}
        for i in range(len(atom_types)):
            # 0 rep None, -1 rep masked
            if atom_types[i] <= 0:
                continue
            a = Chem.Atom(atom_decoder[int(atom_types[i])])
            molIdx = mol.AddAtom(a)
            node_to_idx[i] = molIdx

        for ix, row in enumerate(bond_types):
            for iy, bond in enumerate(row):
                # only traverse half the symmetric matrix
                if iy <= ix or bond == 0 or atom_types[iy] <= 0 or atom_types[ix] <= 0:
                    continue
                else:
                    bond_type = bond_dict[bond]
                mol.AddBond(node_to_idx[ix], node_to_idx[iy], bond_type)

        # try:
        #     mol = mol.GetMol()
        #     #Draw.MolToFile(mol, out_filename)
        #     img=Draw.MolsToGridImage([mol], molsPerRow=1, subImgSize=(800,800), legends=legend_list)    
        #     img.save(out_filename)
        # except Chem.KekulizeException:
        #     mol = None
        #     print("Can't kekulize molecule")

        # return

        try:
            mol = mol.GetMol()
        except Chem.KekulizeException:
            mol = None
            print("Can't kekulize molecule")

        return mol
            


    def batch_graph2mol(self, atom_types_list, bond_types_list, legend_list, out_filename):
        assert len(atom_types_list) == len(bond_types_list)

        mol_list = []
        for i in range(len(atom_types_list)):
            atom_types = atom_types_list[i]
            bond_types = bond_types_list[i]

            mol = self.graph2mol(atom_types, bond_types)
            mol_list.append(mol)


        try:
            img=Draw.MolsToGridImage(mol_list, molsPerRow=3, subImgSize=(1600,800), legends=legend_list)    
            img.save(out_filename)
        except Exception:
            print(traceback.format_exc())
    
        return 



    def smiles2mol(self, smile_list, legend_list, out_filename):
        mol_list = []
        for smile in smile_list:
            if smile is None:
                mol_list.append(Chem.MolFromSmiles("C1=CC=CC=C1"))
            else:
                mol_list.append(Chem.MolFromSmiles(smile))
        img=Draw.MolsToGridImage(mol_list, molsPerRow=4, subImgSize=(800,800), legends=legend_list)    
        img.save(out_filename, transparent=True)

        return 




# smile_list = ["CC(C)(C)OC(=O)O[C:12](=[O:13])[O:14][C:15]([CH3:16])([CH3:17])[CH3:18].[CH3:1][C:2](=[O:3])[c:4]1[cH:5][cH:6][c:7]2[c:8]([cH:9][cH:10][nH:11]2)[cH:19]1.[CH3:1][C:2](=[O:3])[c:4]1[cH:5][cH:6][c:7]2[c:8]([cH:9][cH:10][nH:11]2)[cH:19]1", "O=C(O[C:2](=[O:1])[C:21]([F:22])([F:23])[F:24])C(F)(F)F.[NH2:3][c:4]1[cH:5][cH:6][c:7]([O:8][c:9]2[cH:10][cH:11][n:12][c:13]3[nH:14][cH:15][cH:16][c:17]23)[c:18]([F:19])[cH:20]1", "O=C(OCc1ccccc1)[NH:10][CH2:9][CH2:8][CH2:7][CH2:6][C@@H:5]([C:3]([O:2][CH3:1])=[O:4])[NH:11][C:12](=[O:13])[NH:14][c:15]1[cH:16][c:17]([O:18][CH3:19])[cH:20][c:21]([C:22]([CH3:23])([CH3:24])[CH3:25])[c:26]1[OH:27]","O[C:4]([C:3]1=[C:2]([CH3:1])[S:23][CH2:22][CH2:21][S:20]1)=[O:5].[NH2:6][c:7]1[cH:8][cH:9][c:10]([Cl:11])[c:12]([C:13](=[O:14])[O:15][CH:16]([CH3:17])[CH3:18])[cH:19]1","I[CH3:1].[nH:2]1[cH:3][cH:4][n:5][c:6]1[CH:7]1[CH2:8][CH2:9][N:10]([C:11](=[O:12])[O:13][C:14]([CH3:15])([CH3:16])[CH3:17])[CH2:18][CH2:19]1"]

# smile_list = ["[C:1]1=[C:2]([F:3])[CH:4]=[CH:5][CH:6]=[N:7]1", "[CH3:8][CH:9]([CH3:10])[S:11]", "F[c:1]1[c:2]([F:3])[cH:4][cH:5][cH:6][n:7]1", "[CH3:8][CH:9]([CH3:10])[SH:11]", "[c:1]1([S:11][CH:9]([CH3:8])[CH3:10])[c:2]([F:3])[cH:4][cH:5][cH:6][n:7]1"]

# smile_list = ["[CH3:1][C:2](=[O:3])[c:4]1[cH:5][cH:6][c:7]2[c:8]([cH:9][cH:10][n:11]2[C:12](=[O:13])[O:14][C:15]([CH3:16])([CH3:17])[CH3:18])[cH:19]1", "CC(C)(C)OC(=O)O[C:12](=[O:13])[O:14][C:15]([CH3:16])([CH3:17])[CH3:18].[CH3:1][C:2](=[O:3])[c:4]1[cH:5][cH:6][c:7]2[c:8]([cH:9][cH:10][nH:11]2)[cH:19]1", "[C:12](=[O:13])[O:14][C:15]([CH3:16])([CH3:17])[CH3:18]", "[CH3:1][C:2](=[O:3])[C:4]1=[CH:5][CH:6]=[C:7]2[C:8](=[CH:19]1)[CH:9]=[CH:10][N:11]2", "[C:12](=[O:13])[O:14][C:15]([CH3:16])([CH3:17])[CH3:18].[CH3:1][C:2](=[O:3])[C:4]1=[CH:5][CH:6]=[C:7]2[C:8](=[CH:19]1)[CH:9]=[CH:10][N:11]2"]

# smile_list = ["[CH3:1][O:2][C:3](=[O:4])[C@H:5]([CH2:6][CH2:7][CH2:8][CH2:9][NH2:10])[NH:11][C:12](=[O:13])[NH:14][c:15]1[cH:16][c:17]([O:18][CH3:19])[cH:20][c:21]([C:22]([CH3:23])([CH3:24])[CH3:25])[c:26]1[OH:27]", "O=C(OCc1ccccc1)[NH:10][CH2:9][CH2:8][CH2:7][CH2:6][C@@H:5]([C:3]([O:2][CH3:1])=[O:4])[NH:11][C:12](=[O:13])[NH:14][c:15]1[cH:16][c:17]([O:18][CH3:19])[cH:20][c:21]([C:22]([CH3:23])([CH3:24])[CH3:25])[c:26]1[OH:27]", "[CH3:1][O:2][C:3](=[O:4])[C@H:5]([CH2:6][CH2:7][CH2:8][CH2:9][NH2:10])[NH:11][C:12](=[O:13])[NH:14][C:15]1=[CH:16][C:17]([O:18][CH3:19])=[CH:20][C:21]([C:22]([CH3:23])([CH3:24])[CH3:25])=[C:26]1[OH:27]"]

# smile_list = ["O=C1CCC(=O)N1[Br:28].[CH3:1][CH2:2][O:3][C:4](=[O:5])[c:6]1[n:7][n:8](-[c:9]2[cH:10][cH:11][c:12]([Cl:13])[cH:14][c:15]2[Cl:16])[c:17](-[c:18]2[cH:19][cH:20][c:21]([O:22][CH3:23])[cH:24][cH:25]2)[c:26]1[CH3:27]", "[CH3:1][CH2:2][O:3][C:4](=[O:5])[c:6]1[n:7][n:8](-[c:9]2[cH:10][cH:11][c:12]([Cl:13])[cH:14][c:15]2[Cl:16])[c:17](-[c:18]2[cH:19][cH:20][c:21]([O:22][CH3:23])[cH:24][cH:25]2)[c:26]1[CH2:27][Br:28]", "O=C(O[C:2](=[O:1])[C:17]([F:18])([F:19])[F:20])C(F)(F)F.[NH2:3][CH2:4][c:5]1[cH:6][cH:7][cH:8][cH:9][c:10]1[S:11](=[O:12])(=[O:13])[CH:14]1[CH2:15][CH2:16]1", "[O:1]=[C:2]([NH:3][CH2:4][c:5]1[cH:6][cH:7][cH:8][cH:9][c:10]1[S:11](=[O:12])(=[O:13])[CH:14]1[CH2:15][CH2:16]1)[C:17]([F:18])([F:19])[F:20]", "O=C(OCc1ccccc1)[NH:1][CH2:2][CH2:3][CH2:4][CH2:5][C@@H:6]([C:7]([O:8][CH3:9])=[O:10])[NH:11][C:12](=[O:13])[NH:14][c:15]1[cH:16][c:17]([O:18][CH3:19])[cH:20][c:21]([C:22]([CH3:23])([CH3:24])[CH3:25])[c:26]1[OH:27]", "[NH2:1][CH2:2][CH2:3][CH2:4][CH2:5][C@@H:6]([C:7]([O:8][CH3:9])=[O:10])[NH:11][C:12](=[O:13])[NH:14][c:15]1[cH:16][c:17]([O:18][CH3:19])[cH:20][c:21]([C:22]([CH3:23])([CH3:24])[CH3:25])[c:26]1[OH:27]"]

# smile_list = ["O=C(OCc1ccccc1)[NH:1][CH2:2][CH2:3][CH2:4][CH2:5][C@@H:6]([C:7]([O:8][CH3:9])=[O:10])[NH:11][C:12](=[O:13])[NH:14][c:15]1[cH:16][c:17]([O:18][CH3:19])[cH:20][c:21]([C:22]([CH3:23])([CH3:24])[CH3:25])[c:26]1[OH:27]", "[NH2:1][CH2:2][CH2:3][CH2:4][CH2:5][C@@H:6]([C:7]([O:8][CH3:9])=[O:10])[NH:11][C:12](=[O:13])[NH:14][c:15]1[cH:16][c:17]([O:18][CH3:19])[cH:20][c:21]([C:22]([CH3:23])([CH3:24])[CH3:25])[c:26]1[OH:27]", "[O:1]=[C:2]1[CH2:3][CH2:4][c:5]2[cH:6][c:7]([F:8])[cH:9][cH:10][c:11]21", "[OH:1][CH:2]1[CH2:3][CH2:4][c:5]2[cH:6][c:7]([F:8])[cH:9][cH:10][c:11]21", "O=C(c1ccc([N+](=O)[O-])cc1)[O:27][C@H:26]1[CH2:25][C@H:24]([n:23]2[c:6]3[n:5][cH:4][n:3][c:2]([NH2:1])[c:7]3[c:8](-[c:9]3[cH:10][cH:11][c:12]([O:13][c:14]4[cH:15][cH:16][cH:17][cH:18][cH:19]4)[cH:20][cH:21]3)[n:22]2)[CH2:28]1"]

# smile_list = ["[CH3:1][O:2][c:3]1[cH:4][cH:5][c:6](-[c:7]2[cH:8][cH:9][cH:10][c:11]([C:12](=[O:13])[NH:14][c:15]3[cH:16][cH:17][cH:18][c:19](-[c:20]4[cH:21][cH:22][c:23]([CH2:24][C:25](=[O:26])[OH:27])[s:28]4)[cH:29]3)[cH:30]2)[c:31]([O:32][CH3:33])[cH:34]1", "C[O:27][C:25]([CH2:24][c:23]1[cH:22][cH:21][c:20](-[c:19]2[cH:18][cH:17][cH:16][c:15]([NH:14][C:12]([c:11]3[cH:10][cH:9][cH:8][c:7](-[c:6]4[cH:5][cH:4][c:3]([O:2][CH3:1])[cH:34][c:31]4[O:32][CH3:33])[cH:30]3)=[O:13])[cH:29]2)[s:28]1)=[O:26]", "[CH3:1][CH2:2][CH2:3][n:4]1[c:5]([CH3:6])[cH:7][c:8]2[cH:9][cH:10][n:11][c:12]([NH2:13])[c:14]12", "c1ccc(C[NH:13][c:12]2[n:11][cH:10][cH:9][c:8]3[cH:7][c:5]([CH3:6])[n:4]([CH2:3][CH2:2][CH3:1])[c:14]32)cc1", "[CH3:1][CH2:2][O:3][CH2:4][CH2:5][CH2:6][CH2:7][CH2:8][CH:9]([O:10][C:11](=[O:12])[c:13]1[cH:14][cH:15][c:16]([OH:17])[cH:18][c:19]1[F:20])[C:21]([F:22])([F:23])[F:24]", "c1ccc(C[O:17][c:16]2[cH:15][cH:14][c:13]([C:11]([O:10][CH:9]([CH2:8][CH2:7][CH2:6][CH2:5][CH2:4][O:3][CH2:2][CH3:1])[C:21]([F:22])([F:23])[F:24])=[O:12])[c:19]([F:20])[cH:18]2)cc1"]

# smile_list = ["[CH3:1][O:2][c:3]1[cH:4][c:5]2[n:6][cH:7][cH:8][c:9]([O:10][c:11]3[cH:12][cH:13][c:14]([NH:15][C:16](=[O:17])[NH:18][c:19]4[cH:20][cH:21][c:22]([Cl:23])[cH:24][cH:25]4)[cH:26][cH:27]3)[c:28]2[cH:29][c:30]1[O:31][CH3:32]", "[C:16](=[O:17])=[N:18][c:19]1[cH:20][cH:21][c:22]([Cl:23])[cH:24][cH:25]1.[CH3:1][O:2][c:3]1[cH:4][c:5]2[n:6][cH:7][cH:8][c:9]([O:10][c:11]3[cH:12][cH:13][c:14]([NH2:15])[cH:26][cH:27]3)[c:28]2[cH:29][c:30]1[O:31][CH3:32]", "[CH3:1][C:2]([CH3:3])([CH3:4])[c:5]1[cH:6][cH:7][c:8]([O:9][C@H:10]([C:11](=[O:12])[N:13]2[C:14](=[O:15])[O:16][CH2:17][C@@H:18]2[CH2:19][c:20]2[cH:21][cH:22][cH:23][cH:24][cH:25]2)[C@H:26]([OH:27])[c:28]2[cH:29][cH:30][c:31]([O:32][CH2:33][c:34]3[cH:35][cH:36][cH:37][cH:38][cH:39]3)[cH:40][cH:41]2)[cH:42][cH:43]1", "[CH3:1][C:2]([CH3:3])([CH3:4])[c:5]1[cH:6][cH:7][c:8]([O:9][CH2:10][C:11](=[O:12])[N:13]2[C:14](=[O:15])[O:16][CH2:17][C@@H:18]2[CH2:19][c:20]2[cH:21][cH:22][cH:23][cH:24][cH:25]2)[cH:42][cH:43]1.[CH:26](=[O:27])[c:28]1[cH:29][cH:30][c:31]([O:32][CH2:33][c:34]2[cH:35][cH:36][cH:37][cH:38][cH:39]2)[cH:40][cH:41]1", "[CH3:1][CH2:2][CH2:3][CH:4]([O:5][c:6]1[cH:7][cH:8][cH:9][cH:10][c:11]1[CH2:12][O:13][c:14]1[cH:15][cH:16][c:17]2[o:18][c:19](-[c:20]3[n:21][c:22]([C:23]([CH3:24])([CH3:25])[CH3:26])[cH:27][s:28]3)[cH:29][c:30]2[cH:31]1)[c:32]1[n:33][n:34][n:35][nH:36]1", "[CH3:1][CH2:2][CH2:3][CH:4]([O:5][c:6]1[cH:7][cH:8][cH:9][cH:10][c:11]1[CH2:12][O:13][c:14]1[cH:15][cH:16][c:17]2[o:18][c:19](-[c:20]3[n:21][c:22]([C:23]([CH3:24])([CH3:25])[CH3:26])[cH:27][s:28]3)[cH:29][c:30]2[cH:31]1)[C:32]#[N:33].[N-:34]=[N+:35]=[N-:36]", "[O:1]=[C:2]([OH:3])[CH:4]1[CH2:5][CH2:6][N:7]([CH2:8][c:9]2[cH:10][cH:11][cH:12][cH:13][cH:14]2)[CH2:15][CH:16]1[c:17]1[cH:18][cH:19][c:20]([Cl:21])[cH:22][cH:23]1", "[O:1]=[C:2]([OH:3])[C:4]1=[C:16]([c:17]2[cH:18][cH:19][c:20]([Cl:21])[cH:22][cH:23]2)[CH2:15][N:7]([CH2:8][c:9]2[cH:10][cH:11][cH:12][cH:13][cH:14]2)[CH2:6][CH2:5]1", "[CH3:1][C:2]1=[C:3]([CH2:4][CH2:5][C@@H:6]([CH3:7])[CH:8]=[O:9])[C:10]([CH3:11])([CH3:12])[CH2:13][CH2:14][CH2:15]1", "[CH3:1][C:2]1=[C:3]([CH2:4][CH2:5][C@@H:6]([CH3:7])[CH2:8][OH:9])[C:10]([CH3:11])([CH3:12])[CH2:13][CH2:14][CH2:15]1", "[CH3:1][c:2]1[n:3][c:4]2[cH:5][cH:6][c:7]([NH:8][C:9](=[NH:10])[NH2:11])[c:12]([CH3:13])[c:14]2[nH:15]1", "[C:9](#[N:10])[NH2:11].[CH3:1][c:2]1[n:3][c:4]2[cH:5][cH:6][c:7]([NH2:8])[c:12]([CH3:13])[c:14]2[nH:15]1"]
# legend_list = ["1-product", "1-reactant", "2-product", "2-reactant", "3-product", "3-reactant", "6-product", "6-reactant", "7-product", "7-reactant", "8-product", "8-reactant",]

# smile_list = ["[CH3:1][C:2](=[O:3])[c:4]1[cH:5][cH:6][c:7]2[c:8]([cH:9][cH:10][n:11]2[C:12](=[O:13])[O:14][C:15]([CH3:16])([CH3:17])[CH3:18])[cH:19]1", "CC(C)(C)OC(=O)O[C:12](=[O:13])[O:14][C:15]([CH3:16])([CH3:17])[CH3:18].[CH3:1][C:2](=[O:3])[c:4]1[cH:5][cH:6][c:7]2[c:8]([cH:9][cH:10][nH:11]2)[cH:19]1", "[CH3:1][O:2][C:3](=[O:4])[C@H:5]([CH2:6][CH2:7][CH2:8][CH2:9][NH2:10])[NH:11][C:12](=[O:13])[NH:14][c:15]1[cH:16][c:17]([O:18][CH3:19])[cH:20][c:21]([C:22]([CH3:23])([CH3:24])[CH3:25])[c:26]1[OH:27]", "O=C(OCc1ccccc1)[NH:10][CH2:9][CH2:8][CH2:7][CH2:6][C@@H:5]([C:3]([O:2][CH3:1])=[O:4])[NH:11][C:12](=[O:13])[NH:14][c:15]1[cH:16][c:17]([O:18][CH3:19])[cH:20][c:21]([C:22]([CH3:23])([CH3:24])[CH3:25])[c:26]1[OH:27]", "[CH3:1][CH2:2][CH2:3][O:4][N:5]=[C:6]([C:7](=[O:8])[O:9][CH2:10][CH3:11])[c:12]1[cH:13][s:14][c:15]([NH2:16])[n:17]1", "O=[C:12]([C:6](=[N:5][O:4][CH2:3][CH2:2][CH3:1])[C:7](=[O:8])[O:9][CH2:10][CH3:11])[CH2:13]Br.[S:14]=[C:15]([NH2:16])[NH2:17]"]
# legend_list = ["product", "reactant", "product", "reactant", "product", "reactant"]

# smile_list = ['[Br:1][c:2]1[cH:3][cH:4][c:5]([CH:6]2[O:7][CH2:8][CH2:9][O:10]2)[cH:11][cH:12]1', 'O[CH2:9][CH2:8][OH:7].[Br:1][c:2]1[cH:3][cH:4][c:5]([CH:6]=[O:10])[cH:11][cH:12]1', '[CH3:1][C:2]1([c:3]2[cH:4][c:5]([CH2:6][n:7]3[n:8][cH:9][c:10]([N+:11](=[O:12])[O-:13])[n:14]3)[o:15][n:16]2)[O:17][CH2:18][CH2:19][O:20]1', 'O[CH2:19][CH2:18][OH:17].[CH3:1][C:2]([c:3]1[cH:4][c:5]([CH2:6][n:7]2[n:8][cH:9][c:10]([N+:11](=[O:12])[O-:13])[n:14]2)[o:15][n:16]1)=[O:20]', '[CH3:1][C:2]1([c:3]2[cH:4][cH:5][cH:6][o:7]2)[O:8][CH2:9][CH2:10][O:11]1', 'O[CH2:10][CH2:9][OH:8].[CH3:1][C:2]([c:3]1[cH:4][cH:5][cH:6][o:7]1)=[O:11]', '[O:1]=[C:2]([c:3]1[cH:4][cH:5][cH:6][cH:7][cH:8]1)[c:9]1[n:10][n:11]2[cH:12][cH:13][cH:14][cH:15][c:16]2[c:17]1-[c:18]1[cH:19][cH:20][n:21][c:22]([NH:23][CH:24]2[CH2:25][CH2:26][CH2:27][CH2:28]2)[n:29]1', '[OH:1][CH:2]([c:3]1[cH:4][cH:5][cH:6][cH:7][cH:8]1)[c:9]1[n:10][n:11]2[cH:12][cH:13][cH:14][cH:15][c:16]2[c:17]1-[c:18]1[cH:19][cH:20][n:21][c:22]([NH:23][CH:24]2[CH2:25][CH2:26][CH2:27][CH2:28]2)[n:29]1', '[CH3:1][CH2:2][CH2:3][C@:4]([CH2:5][CH:6]=[O:7])([CH2:8][CH2:9][c:10]1[cH:11][cH:12][cH:13][cH:14][cH:15]1)[O:16][CH2:17][O:18][c:19]1[cH:20][cH:21][c:22](-[c:23]2[cH:24][cH:25][cH:26][cH:27][cH:28]2)[cH:29][cH:30]1', '[CH3:1][CH2:2][CH2:3][C@:4]([CH2:5][CH2:6][OH:7])([CH2:8][CH2:9][c:10]1[cH:11][cH:12][cH:13][cH:14][cH:15]1)[O:16][CH2:17][O:18][c:19]1[cH:20][cH:21][c:22](-[c:23]2[cH:24][cH:25][cH:26][cH:27][cH:28]2)[cH:29][cH:30]1', '[CH3:1][Si:2]([CH3:3])([CH3:4])[CH2:5][CH2:6][S:7](=[O:8])(=[O:9])[N:10]1[CH2:11][CH2:12][CH2:13][CH:14]([CH:15]=[O:16])[CH2:17]1', '[CH3:1][Si:2]([CH3:3])([CH3:4])[CH2:5][CH2:6][S:7](=[O:8])(=[O:9])[N:10]1[CH2:11][CH2:12][CH2:13][CH:14]([CH2:15][OH:16])[CH2:17]1', '[CH3:1][C@@H:2]1[CH2:3][CH2:4][C@@:5]2([O:6][CH2:7]1)[O:8][C@H:9]1[CH2:10][C@H:11]3[C@@H:12]4[CH2:13][CH2:14][C@H:15]5[CH2:16][C:17](=[O:18])[CH2:19][CH2:20][C@:21]5([CH3:22])[C@H:23]4[CH2:24][CH2:25][C@:26]3([CH3:27])[C@H:28]1[C@@H:29]2[CH3:30]', '[CH3:1][C@@H:2]1[CH2:3][CH2:4][C@@:5]2([O:6][CH2:7]1)[O:8][C@H:9]1[CH2:10][C@H:11]3[C@@H:12]4[CH2:13][CH2:14][C@H:15]5[CH2:16][C@@H:17]([OH:18])[CH2:19][CH2:20][C@:21]5([CH3:22])[C@H:23]4[CH2:24][CH2:25][C@:26]3([CH3:27])[C@H:28]1[C@@H:29]2[CH3:30]', '[CH3:1][O:2][c:3]1[cH:4][c:5]([CH:6]=[O:7])[cH:8][c:9]([O:10][CH3:11])[c:12]1[CH2:13][CH2:14][CH2:15][CH2:16][CH2:17][CH2:18][CH2:19][CH2:20][CH2:21][CH2:22][CH2:23][CH2:24][CH2:25][CH2:26][O:27][Si:28]([CH3:29])([CH3:30])[C:31]([CH3:32])([CH3:33])[CH3:34]', '[CH3:1][O:2][c:3]1[cH:4][c:5]([CH2:6][OH:7])[cH:8][c:9]([O:10][CH3:11])[c:12]1[CH2:13][CH2:14][CH2:15][CH2:16][CH2:17][CH2:18][CH2:19][CH2:20][CH2:21][CH2:22][CH2:23][CH2:24][CH2:25][CH2:26][O:27][Si:28]([CH3:29])([CH3:30])[C:31]([CH3:32])([CH3:33])[CH3:34]', '[CH3:1][c:2]1[n:3][o:4][c:5](-[c:6]2[cH:7][cH:8][c:9](-[c:10]3[cH:11][cH:12][c:13]([C:14]4([C:15](=[O:16])[OH:17])[CH2:18][CH2:19]4)[cH:20][cH:21]3)[cH:22][cH:23]2)[c:24]1[CH2:25][C:26]([CH3:27])([OH:28])[CH2:29][CH2:30][c:31]1[cH:32][cH:33][cH:34][cH:35][cH:36]1', '[CH3:1][c:2]1[n:3][o:4][c:5](-[c:6]2[cH:7][cH:8][c:9](-[c:10]3[cH:11][cH:12][c:13]([C:14]4([C:15](=[O:16])[OH:17])[CH2:18][CH2:19]4)[cH:20][cH:21]3)[cH:22][cH:23]2)[c:24]1[CH2:25][C:26](=[O:28])[CH2:29][CH2:30][c:31]1[cH:32][cH:33][cH:34][cH:35][cH:36]1.[Mg+][CH3:27]', '[CH3:1][c:2]1[n:3][n:4](-[c:5]2[c:6]([Cl:7])[cH:8][c:9]([C:10]([F:11])([F:12])[F:13])[cH:14][c:15]2[Cl:16])[n:17][c:18]1[CH:19]=[O:20]', '[CH3:1][c:2]1[n:3][n:4](-[c:5]2[c:6]([Cl:7])[cH:8][c:9]([C:10]([F:11])([F:12])[F:13])[cH:14][c:15]2[Cl:16])[n:17][c:18]1[CH2:19][OH:20]', '[CH3:1][O:2][c:3]1[cH:4][cH:5][cH:6][c:7]([CH:8]([OH:9])[C@H:10]2[CH2:11][CH2:12][CH2:13][CH2:14][C:15]2=[O:16])[cH:17]1', 'C[Si](C)(C)[O:16][C:15]1=[CH:10][CH2:11][CH2:12][CH2:13][CH2:14]1.[CH3:1][O:2][c:3]1[cH:4][cH:5][cH:6][c:7]([CH:8]=[O:9])[cH:17]1', '[CH3:1][N:2]([CH2:3][c:4]1[cH:5][cH:6][c:7]([CH:8]=[O:9])[c:10]([F:11])[cH:12]1)[C:13](=[O:14])[O:15][C:16]([CH3:17])([CH3:18])[CH3:19]', '[CH3:1][N:2]([CH2:3][c:4]1[cH:5][cH:6][c:7]([CH2:8][OH:9])[c:10]([F:11])[cH:12]1)[C:13](=[O:14])[O:15][C:16]([CH3:17])([CH3:18])[CH3:19]', '[CH3:1][CH2:2][c:3]1[cH:4][cH:5][c:6]([NH:7][C:8](=[O:9])[NH:10][c:11]2[cH:12][cH:13][c:14]([O:15][c:16]3[cH:17][cH:18][n:19][c:20](-[c:21]4[n:22][n:23][n:24][nH:25]4)[cH:26]3)[cH:27][cH:28]2)[cH:29][cH:30]1', '[CH3:1][CH2:2][c:3]1[cH:4][cH:5][c:6]([N:7]=[C:8]=[O:9])[cH:29][cH:30]1.[NH2:10][c:11]1[cH:12][cH:13][c:14]([O:15][c:16]2[cH:17][cH:18][n:19][c:20](-[c:21]3[n:22][n:23][n:24][nH:25]3)[cH:26]2)[cH:27][cH:28]1', '[OH:1][C@@H:2]1[CH:3]=[CH:4][C@H:5]([O:6][CH:7]2[CH2:8][CH2:9][CH2:10][CH2:11][O:12]2)[CH2:13]1', '[CH:7]1=[CH:8][CH2:9][CH2:10][CH2:11][O:12]1.[OH:1][CH:2]1[CH:3]=[CH:4][CH:5]([OH:6])[CH2:13]1', '[CH3:1][C:2]([CH3:3])([CH3:4])[O:5][C:6](=[O:7])[N:8]1[CH2:9][CH2:10][C@H:11]([O:12][CH2:13][CH2:14][C:15]#[N:16])[CH2:17]1', '[CH2:13]=[CH:14][C:15]#[N:16].[CH3:1][C:2]([CH3:3])([CH3:4])[O:5][C:6](=[O:7])[N:8]1[CH2:9][CH2:10][C@H:11]([OH:12])[CH2:17]1', '[O:1]=[CH:2]/[CH:3]=[CH:4]/[c:5]1[cH:6][c:7]([F:8])[cH:9][c:10]([F:11])[cH:12]1', '[OH:1][CH2:2]/[CH:3]=[CH:4]/[c:5]1[cH:6][c:7]([F:8])[cH:9][c:10]([F:11])[cH:12]1', '[CH3:1][C:2]([CH3:3])([CH3:4])[NH:5][C:6](=[O:7])[NH:8][C:9]([CH3:10])([CH3:11])[C:12]#[N:13]', '[CH3:1][C:2]([CH3:3])([CH3:4])[N:5]=[C:6]=[O:7].[NH2:8][C:9]([CH3:10])([CH3:11])[C:12]#[N:13]', '[CH3:1][C:2]([CH3:3])([CH3:4])[O:5][C:6](=[O:7])[N:8]1[CH2:9][c:10]2[n:11][cH:12][n:13][c:14]([O:15][c:16]3[cH:17][cH:18][c:19]4[c:20]([cH:21][cH:22][n:23]4[C:24](=[O:25])[NH:26][c:27]4[cH:28][c:29]([C:30]5([CH:31]=[O:32])[CH2:33][CH2:34]5)[o:35][n:36]4)[cH:37]3)[c:38]2[CH2:39]1', '[CH3:1][C:2]([CH3:3])([CH3:4])[O:5][C:6](=[O:7])[N:8]1[CH2:9][c:10]2[n:11][cH:12][n:13][c:14]([O:15][c:16]3[cH:17][cH:18][c:19]4[c:20]([cH:21][cH:22][n:23]4[C:24](=[O:25])[NH:26][c:27]4[cH:28][c:29]([C:30]5([CH2:31][OH:32])[CH2:33][CH2:34]5)[o:35][n:36]4)[cH:37]3)[c:38]2[CH2:39]1', '[CH3:1][O:2][C:3](=[O:4])[CH2:5][N:6]([c:7]1[cH:8][cH:9][cH:10][cH:11][c:12]1[CH3:13])[S:14](=[O:15])(=[O:16])[c:17]1[cH:18][cH:19][cH:20][cH:21][c:22]1[C:23](=[O:24])[c:25]1[cH:26][c:27]([O:28][CH3:29])[c:30]2[c:31]([cH:32]1)[O:33][CH2:34][O:35]2', '[CH3:1][O:2][C:3](=[O:4])[CH2:5][N:6]([c:7]1[cH:8][cH:9][cH:10][cH:11][c:12]1[CH3:13])[S:14](=[O:15])(=[O:16])[c:17]1[cH:18][cH:19][cH:20][cH:21][c:22]1[CH:23]([OH:24])[c:25]1[cH:26][c:27]([O:28][CH3:29])[c:30]2[c:31]([cH:32]1)[O:33][CH2:34][O:35]2', '[CH3:1][CH2:2][CH:3]=[CH:4][CH2:5][CH2:6][CH:7]([OH:8])[C:9]#[C:10][CH:11]([CH3:12])[OH:13]', '[CH3:1][CH2:2][CH:3]=[CH:4][CH2:5][CH2:6][CH:7]=[O:8].[CH:9]#[C:10][CH:11]([CH3:12])[OH:13]', '[CH3:1][O:2][C:3](=[O:4])[C:5]1([c:6]2[cH:7][cH:8][c:9]([Br:10])[cH:11][cH:12]2)[CH2:13][CH2:14][C:15]2([CH2:16][CH2:17]1)[O:18][CH2:19][CH2:20][O:21]2', 'O[CH2:20][CH2:19][OH:18].[CH3:1][O:2][C:3](=[O:4])[C:5]1([c:6]2[cH:7][cH:8][c:9]([Br:10])[cH:11][cH:12]2)[CH2:13][CH2:14][C:15](=[O:21])[CH2:16][CH2:17]1', '[CH3:1][O:2][C:3](=[O:4])[c:5]1[cH:6][cH:7][cH:8][cH:9][c:10]1[NH:11][C:12](=[O:13])[NH:14][c:15]1[cH:16][c:17]([C:18](=[O:19])[N:20]2[CH2:21][CH2:22][CH2:23][c:24]3[cH:25][cH:26][cH:27][cH:28][c:29]32)[cH:30][cH:31][c:32]1[Cl:33]', '[CH3:1][O:2][C:3](=[O:4])[c:5]1[cH:6][cH:7][cH:8][cH:9][c:10]1[N:11]=[C:12]=[O:13].[NH2:14][c:15]1[cH:16][c:17]([C:18](=[O:19])[N:20]2[CH2:21][CH2:22][CH2:23][c:24]3[cH:25][cH:26][cH:27][cH:28][c:29]32)[cH:30][cH:31][c:32]1[Cl:33]', '[CH3:1][CH:2]([C:3]#[N:4])[O:5][c:6]1[cH:7][cH:8][cH:9][cH:10][cH:11]1', '[CH2:1]=[CH:2][C:3]#[N:4].[OH:5][c:6]1[cH:7][cH:8][cH:9][cH:10][cH:11]1', '[CH3:1][CH2:2][NH:3][C:4](=[O:5])[N:6]1[CH2:7][CH2:8][CH:9]([c:10]2[cH:11][nH:12][c:13]3[c:14]([C:15]([NH2:16])=[O:17])[cH:18][c:19](-[c:20]4[cH:21][cH:22][cH:23][cH:24][cH:25]4)[cH:26][c:27]23)[CH2:28][CH2:29]1', '[CH3:1][CH2:2][N:3]=[C:4]=[O:5].[NH:6]1[CH2:7][CH2:8][CH:9]([c:10]2[cH:11][nH:12][c:13]3[c:14]([C:15]([NH2:16])=[O:17])[cH:18][c:19](-[c:20]4[cH:21][cH:22][cH:23][cH:24][cH:25]4)[cH:26][c:27]23)[CH2:28][CH2:29]1', '[CH3:1][c:2]1[cH:3][cH:4][c:5]([CH2:6][CH2:7][NH:8][C:9](=[S:10])[NH:11][c:12]2[cH:13][cH:14][c:15]3[c:16]([cH:17]2)[c:18]([C:19]([F:20])([F:21])[F:22])[cH:23][c:24](=[O:25])[n:26]3[CH3:27])[cH:28][cH:29]1', '[CH3:1][c:2]1[cH:3][cH:4][c:5]([CH2:6][CH2:7][N:8]=[C:9]=[S:10])[cH:28][cH:29]1.[NH2:11][c:12]1[cH:13][cH:14][c:15]2[c:16]([cH:17]1)[c:18]([C:19]([F:20])([F:21])[F:22])[cH:23][c:24](=[O:25])[n:26]2[CH3:27]']
# legend_list = ["product", "reactant"] * 25

smile_list = ["[F:1][C:2]([F:3])([F:4])[O:5][c:6]1[cH:7][cH:8][cH:9][c:10](-[c:11]2[cH:12][n:13][c:14]3[cH:15][cH:16][c:17]([Cl:18])[n:19][n:20]23)[cH:21]1", "Br.OBO", "Br[c:11]1[cH:12][n:13][c:14]2[cH:15][cH:16][c:17]([Cl:18])[n:19][n:20]12.OB(O)[c:10]1[cH:9][cH:8][cH:7][c:6]([O:5][C:2]([F:1])([F:3])[F:4])[cH:21]1"]
out_filename = "./paper_pipeline.png"
legend_list = [""] * 3
MolecularVisualization(False, None).smiles2mol(smile_list, legend_list, out_filename)
